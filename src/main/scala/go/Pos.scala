package strategygames.go

import scala.math.{ abs, max, min }

case class Pos private (index: Int) extends AnyVal {

  def down: Option[Pos]      = Pos.at(file.index, rank.index - 1)
  def left: Option[Pos]      = Pos.at(file.index - 1, rank.index)
  def downLeft: Option[Pos]  = Pos.at(file.index - 1, rank.index - 1)
  def downRight: Option[Pos] = Pos.at(file.index + 1, rank.index - 1)
  def up: Option[Pos]        = Pos.at(file.index, rank.index + 1)
  def right: Option[Pos]     = Pos.at(file.index + 1, rank.index)
  def upLeft: Option[Pos]    = Pos.at(file.index - 1, rank.index + 1)
  def upRight: Option[Pos]   = Pos.at(file.index + 1, rank.index + 1)

  def >|(stop: Pos => Boolean): List[Pos]                   = |<>|(stop, _.right)
  def |<(stop: Pos => Boolean): List[Pos]                   = |<>|(stop, _.left)
  def |<>|(stop: Pos => Boolean, dir: Direction): List[Pos] =
    dir(this) map { p =>
      p :: (if (stop(p)) Nil else p.|<>|(stop, dir))
    } getOrElse Nil

  def ?<(other: Pos): Boolean = file < other.file
  def ?>(other: Pos): Boolean = file > other.file
  def ?+(other: Pos): Boolean = rank < other.rank
  def ?^(other: Pos): Boolean = rank > other.rank
  def ?|(other: Pos): Boolean = file == other.file
  def ?-(other: Pos): Boolean = rank == other.rank

  def <->(other: Pos): Iterable[Pos] =
    min(file.index, other.file.index) to max(file.index, other.file.index) flatMap { Pos.at(_, rank.index) }

  def touches(other: Pos): Boolean = xDist(other) <= 1 && yDist(other) <= 1

  def onSameDiagonal(other: Pos): Boolean =
    file.index - rank.index == other.file.index - other.rank.index || file.index + rank.index == other.file.index + other.rank.index
  def onSameLine(other: Pos): Boolean     = ?-(other) || ?|(other)

  def xDist(other: Pos) = abs(file - other.file)
  def yDist(other: Pos) = abs(rank - other.rank)

  def isLight: Boolean = (file.index + rank.index) % 2 == 1

  @inline def file = File of this
  @inline def rank = Rank of this

  // We're going to use the chess piotr's which are not based on the
  // indices that we use.
  def chessIndex: Int = index match {
    case 6  => 13
    case 7  => 12
    case 8  => 11
    case 9  => 10
    case 10 => 9
    case 11 => 8
    case i  => i
  }
  // todo fix piotr's to match fairy and then some

  def piotr: Char = {
    if (chessIndex <= 25) (97 + chessIndex).toChar      // a ...
    else if (chessIndex <= 51) (39 + chessIndex).toChar // A ...
    else if (chessIndex <= 61) (chessIndex - 4).toChar // 0 ...
    else if (chessIndex == 62) '!'
    else '?'
  }
  def piotrStr    = piotr.toString

  def key               = file.toString + rank.toString
  override def toString = key
}

object Pos {
  def apply(index: Int): Option[Pos] =
    if (0 <= index && index < File.all.size * Rank.all.size) Some(new Pos(index))
    else None

  def apply(file: File, rank: Rank): Pos = new Pos(file.index + (File.all.size - file.index) * rank.index)

  def at(x: Int, y: Int): Option[Pos] =
    if (0 <= x && x < File.all.size && 0 <= y && y < Rank.all.size)
      Some(new Pos(x + (File.all.size - x) * y))
    else None

  def fromKey(key: String): Option[Pos] = allKeys get key

  def piotr(c: Char): Option[Pos] = allPiotrs get c

  def keyToPiotr(key: String)          = fromKey(key) map (_.piotr)
  def doubleKeyToPiotr(key: String)    =
    for {
      a <- keyToPiotr(key take 2)
      b <- keyToPiotr(key drop 2)
    } yield s"$a$b"
  def doublePiotrToKey(piotrs: String) =
    for {
      a <- piotr(piotrs.head)
      b <- piotr(piotrs(1))
    } yield s"${a.key}${b.key}"

  val A1  = new Pos(0)
  val B1  = new Pos(1)
  val C1  = new Pos(2)
  val D1  = new Pos(3)
  val E1  = new Pos(4)
  val F1  = new Pos(5)
  val G1  = new Pos(6)
  val H1  = new Pos(7)
  val I1  = new Pos(8)
  val J1  = new Pos(9)
  val K1  = new Pos(10)
  val L1  = new Pos(11)
  val M1  = new Pos(12)
  val N1  = new Pos(13)
  val O1  = new Pos(14)
  val P1  = new Pos(15)
  val Q1  = new Pos(16)
  val R1  = new Pos(17)
  val S1  = new Pos(18)
  val A2  = new Pos(19)
  val B2  = new Pos(20)
  val C2  = new Pos(21)
  val D2  = new Pos(22)
  val E2  = new Pos(23)
  val F2  = new Pos(24)
  val G2  = new Pos(25)
  val H2  = new Pos(26)
  val I2  = new Pos(27)
  val J2  = new Pos(28)
  val K2  = new Pos(29)
  val L2  = new Pos(30)
  val M2  = new Pos(31)
  val N2  = new Pos(32)
  val O2  = new Pos(33)
  val P2  = new Pos(34)
  val Q2  = new Pos(35)
  val R2  = new Pos(36)
  val S2  = new Pos(37)
  val A3  = new Pos(38)
  val B3  = new Pos(39)
  val C3  = new Pos(40)
  val D3  = new Pos(41)
  val E3  = new Pos(42)
  val F3  = new Pos(43)
  val G3  = new Pos(44)
  val H3  = new Pos(45)
  val I3  = new Pos(46)
  val J3  = new Pos(47)
  val K3  = new Pos(48)
  val L3  = new Pos(49)
  val M3  = new Pos(50)
  val N3  = new Pos(51)
  val O3  = new Pos(52)
  val P3  = new Pos(53)
  val Q3  = new Pos(54)
  val R3  = new Pos(55)
  val S3  = new Pos(56)
  val A4  = new Pos(57)
  val B4  = new Pos(58)
  val C4  = new Pos(59)
  val D4  = new Pos(60)
  val E4  = new Pos(61)
  val F4  = new Pos(62)
  val G4  = new Pos(63)
  val H4  = new Pos(64)
  val I4  = new Pos(65)
  val J4  = new Pos(66)
  val K4  = new Pos(67)
  val L4  = new Pos(68)
  val M4  = new Pos(69)
  val N4  = new Pos(70)
  val O4  = new Pos(71)
  val P4  = new Pos(72)
  val Q4  = new Pos(73)
  val R4  = new Pos(74)
  val S4  = new Pos(75)
  val A5  = new Pos(76)
  val B5  = new Pos(77)
  val C5  = new Pos(78)
  val D5  = new Pos(79)
  val E5  = new Pos(80)
  val F5  = new Pos(81)
  val G5  = new Pos(82)
  val H5  = new Pos(83)
  val I5  = new Pos(84)
  val J5  = new Pos(85)
  val K5  = new Pos(86)
  val L5  = new Pos(87)
  val M5  = new Pos(88)
  val N5  = new Pos(89)
  val O5  = new Pos(90)
  val P5  = new Pos(91)
  val Q5  = new Pos(92)
  val R5  = new Pos(93)
  val S5  = new Pos(94)
  val A6  = new Pos(95)
  val B6  = new Pos(96)
  val C6  = new Pos(97)
  val D6  = new Pos(98)
  val E6  = new Pos(99)
  val F6  = new Pos(100)
  val G6  = new Pos(101)
  val H6  = new Pos(102)
  val I6  = new Pos(103)
  val J6  = new Pos(104)
  val K6  = new Pos(105)
  val L6  = new Pos(106)
  val M6  = new Pos(107)
  val N6  = new Pos(108)
  val O6  = new Pos(109)
  val P6  = new Pos(110)
  val Q6  = new Pos(111)
  val R6  = new Pos(112)
  val S6  = new Pos(113)
  val A7  = new Pos(114)
  val B7  = new Pos(115)
  val C7  = new Pos(116)
  val D7  = new Pos(117)
  val E7  = new Pos(118)
  val F7  = new Pos(119)
  val G7  = new Pos(120)
  val H7  = new Pos(121)
  val I7  = new Pos(122)
  val J7  = new Pos(123)
  val K7  = new Pos(124)
  val L7  = new Pos(125)
  val M7  = new Pos(126)
  val N7  = new Pos(127)
  val O7  = new Pos(128)
  val P7  = new Pos(129)
  val Q7  = new Pos(130)
  val R7  = new Pos(131)
  val S7  = new Pos(132)
  val A8  = new Pos(133)
  val B8  = new Pos(134)
  val C8  = new Pos(135)
  val D8  = new Pos(136)
  val E8  = new Pos(137)
  val F8  = new Pos(138)
  val G8  = new Pos(139)
  val H8  = new Pos(140)
  val I8  = new Pos(141)
  val J8  = new Pos(142)
  val K8  = new Pos(143)
  val L8  = new Pos(144)
  val M8  = new Pos(145)
  val N8  = new Pos(146)
  val O8  = new Pos(147)
  val P8  = new Pos(148)
  val Q8  = new Pos(149)
  val R8  = new Pos(150)
  val S8  = new Pos(151)
  val A9  = new Pos(152)
  val B9  = new Pos(153)
  val C9  = new Pos(154)
  val D9  = new Pos(155)
  val E9  = new Pos(156)
  val F9  = new Pos(157)
  val G9  = new Pos(158)
  val H9  = new Pos(159)
  val I9  = new Pos(160)
  val J9  = new Pos(161)
  val K9  = new Pos(162)
  val L9  = new Pos(163)
  val M9  = new Pos(164)
  val N9  = new Pos(165)
  val O9  = new Pos(166)
  val P9  = new Pos(167)
  val Q9  = new Pos(168)
  val R9  = new Pos(169)
  val S9  = new Pos(170)
  val A10 = new Pos(171)
  val B10 = new Pos(172)
  val C10 = new Pos(173)
  val D10 = new Pos(174)
  val E10 = new Pos(175)
  val F10 = new Pos(176)
  val G10 = new Pos(177)
  val H10 = new Pos(178)
  val I10 = new Pos(179)
  val J10 = new Pos(180)
  val K10 = new Pos(181)
  val L10 = new Pos(182)
  val M10 = new Pos(183)
  val N10 = new Pos(184)
  val O10 = new Pos(185)
  val P10 = new Pos(186)
  val Q10 = new Pos(187)
  val R10 = new Pos(188)
  val S10 = new Pos(189)
  val A11 = new Pos(190)
  val B11 = new Pos(191)
  val C11 = new Pos(192)
  val D11 = new Pos(193)
  val E11 = new Pos(194)
  val F11 = new Pos(195)
  val G11 = new Pos(196)
  val H11 = new Pos(197)
  val I11 = new Pos(198)
  val J11 = new Pos(199)
  val K11 = new Pos(200)
  val L11 = new Pos(201)
  val M11 = new Pos(202)
  val N11 = new Pos(203)
  val O11 = new Pos(204)
  val P11 = new Pos(205)
  val Q11 = new Pos(206)
  val R11 = new Pos(207)
  val S11 = new Pos(208)
  val A12 = new Pos(209)
  val B12 = new Pos(210)
  val C12 = new Pos(211)
  val D12 = new Pos(212)
  val E12 = new Pos(213)
  val F12 = new Pos(214)
  val G12 = new Pos(215)
  val H12 = new Pos(216)
  val I12 = new Pos(217)
  val J12 = new Pos(218)
  val K12 = new Pos(219)
  val L12 = new Pos(220)
  val M12 = new Pos(221)
  val N12 = new Pos(222)
  val O12 = new Pos(223)
  val P12 = new Pos(224)
  val Q12 = new Pos(225)
  val R12 = new Pos(226)
  val S12 = new Pos(227)
  val A13 = new Pos(228)
  val B13 = new Pos(229)
  val C13 = new Pos(230)
  val D13 = new Pos(231)
  val E13 = new Pos(232)
  val F13 = new Pos(233)
  val G13 = new Pos(234)
  val H13 = new Pos(235)
  val I13 = new Pos(236)
  val J13 = new Pos(237)
  val K13 = new Pos(238)
  val L13 = new Pos(239)
  val M13 = new Pos(240)
  val N13 = new Pos(241)
  val O13 = new Pos(242)
  val P13 = new Pos(243)
  val Q13 = new Pos(244)
  val R13 = new Pos(245)
  val S13 = new Pos(246)
  val A14 = new Pos(247)
  val B14 = new Pos(248)
  val C14 = new Pos(249)
  val D14 = new Pos(250)
  val E14 = new Pos(251)
  val F14 = new Pos(252)
  val G14 = new Pos(253)
  val H14 = new Pos(254)
  val I14 = new Pos(255)
  val J14 = new Pos(256)
  val K14 = new Pos(257)
  val L14 = new Pos(258)
  val M14 = new Pos(259)
  val N14 = new Pos(260)
  val O14 = new Pos(261)
  val P14 = new Pos(262)
  val Q14 = new Pos(263)
  val R14 = new Pos(264)
  val S14 = new Pos(265)
  val A15 = new Pos(266)
  val B15 = new Pos(267)
  val C15 = new Pos(268)
  val D15 = new Pos(269)
  val E15 = new Pos(270)
  val F15 = new Pos(271)
  val G15 = new Pos(272)
  val H15 = new Pos(273)
  val I15 = new Pos(274)
  val J15 = new Pos(275)
  val K15 = new Pos(276)
  val L15 = new Pos(277)
  val M15 = new Pos(278)
  val N15 = new Pos(279)
  val O15 = new Pos(280)
  val P15 = new Pos(281)
  val Q15 = new Pos(282)
  val R15 = new Pos(283)
  val S15 = new Pos(284)
  val A16 = new Pos(285)
  val B16 = new Pos(286)
  val C16 = new Pos(287)
  val D16 = new Pos(288)
  val E16 = new Pos(289)
  val F16 = new Pos(290)
  val G16 = new Pos(291)
  val H16 = new Pos(292)
  val I16 = new Pos(293)
  val J16 = new Pos(294)
  val K16 = new Pos(295)
  val L16 = new Pos(296)
  val M16 = new Pos(297)
  val N16 = new Pos(298)
  val O16 = new Pos(299)
  val P16 = new Pos(300)
  val Q16 = new Pos(301)
  val R16 = new Pos(302)
  val S16 = new Pos(303)
  val A17 = new Pos(304)
  val B17 = new Pos(305)
  val C17 = new Pos(306)
  val D17 = new Pos(307)
  val E17 = new Pos(308)
  val F17 = new Pos(309)
  val G17 = new Pos(310)
  val H17 = new Pos(311)
  val I17 = new Pos(312)
  val J17 = new Pos(313)
  val K17 = new Pos(314)
  val L17 = new Pos(315)
  val M17 = new Pos(316)
  val N17 = new Pos(317)
  val O17 = new Pos(318)
  val P17 = new Pos(319)
  val Q17 = new Pos(320)
  val R17 = new Pos(321)
  val S17 = new Pos(322)
  val A18 = new Pos(323)
  val B18 = new Pos(324)
  val C18 = new Pos(325)
  val D18 = new Pos(326)
  val E18 = new Pos(327)
  val F18 = new Pos(328)
  val G18 = new Pos(329)
  val H18 = new Pos(330)
  val I18 = new Pos(331)
  val J18 = new Pos(332)
  val K18 = new Pos(333)
  val L18 = new Pos(334)
  val M18 = new Pos(335)
  val N18 = new Pos(336)
  val O18 = new Pos(337)
  val P18 = new Pos(338)
  val Q18 = new Pos(339)
  val R18 = new Pos(340)
  val S18 = new Pos(341)
  val A19 = new Pos(342)
  val B19 = new Pos(343)
  val C19 = new Pos(344)
  val D19 = new Pos(345)
  val E19 = new Pos(346)
  val F19 = new Pos(347)
  val G19 = new Pos(348)
  val H19 = new Pos(349)
  val I19 = new Pos(350)
  val J19 = new Pos(351)
  val K19 = new Pos(352)
  val L19 = new Pos(353)
  val M19 = new Pos(354)
  val N19 = new Pos(355)
  val O19 = new Pos(356)
  val P19 = new Pos(357)
  val Q19 = new Pos(358)
  val R19 = new Pos(359)
  val S19 = new Pos(360)

  val all: List[Pos] = (0 to (File.all.size * Rank.all.size) - 1).map(new Pos(_)).toList

  val allKeys: Map[String, Pos] = all
    .map { pos =>
      pos.key -> pos
    }
    .to(Map)

  val allPiotrs: Map[Char, Pos] = all
    .map { pos =>
      pos.piotr -> pos
    }
    .to(Map)

  val posR = "([a-s]0?[1-9]|[a-s]1[0-9])"

}
