package strategygames
package format.pgn

import strategygames.{ Drop => StratDrop, Move => StratMove }

object Dumper {

<<<<<<< HEAD
  def apply(lib: GameLogic, data: StratMove): String = (lib, data) match {
    case (GameLogic.Draughts(), StratMove.Draughts(data))         =>
      draughts.format.pdn.Dumper(data)
    case (GameLogic.Chess(), StratMove.Chess(data))               =>
      chess.format.pgn.Dumper(data)
    case (GameLogic.FairySF(), StratMove.FairySF(data))           =>
      fairysf.format.pgn.Dumper(data)
    case (GameLogic.Samurai(), StratMove.Samurai(data))           =>
      samurai.format.pgn.Dumper(data)
    case (GameLogic.Togyzkumalak(), StratMove.Togyzkumalak(data)) =>
      togyzkumalak.format.pgn.Dumper(data)
    case _                                                        =>
      sys.error("Mismatched gamelogic types 31")
  }

  def apply(lib: GameLogic, data: StratDrop): String = (lib, data) match {
    case (GameLogic.Chess(), StratDrop.Chess(data))     => chess.format.pgn.Dumper(data)
    case (GameLogic.FairySF(), StratDrop.FairySF(data)) => fairysf.format.pgn.Dumper(data)
    case _                                              => sys.error("Drops can only be applied to chess/fairysf")
=======
  def apply(lib: GameLogic, data: Move): String = (lib, data) match {
    case (GameLogic.Draughts(), Move.Draughts(data))         => draughts.format.pdn.Dumper(data)
    case (GameLogic.Chess(), Move.Chess(data))               => chess.format.pgn.Dumper(data)
    case (GameLogic.FairySF(), Move.FairySF(data))           => fairysf.format.pgn.Dumper(data)
    case (GameLogic.Samurai(), Move.Samurai(data))           => samurai.format.pgn.Dumper(data)
    case (GameLogic.Togyzkumalak(), Move.Togyzkumalak(data)) => togyzkumalak.format.pgn.Dumper(data)
    case (GameLogic.Go(), _)                                 => sys.error("Mismatched gamelogic types 31 go has no moves")
    case _                                                   => sys.error("Mismatched gamelogic types 31")
  }

  def apply(lib: GameLogic, data: Drop): String = (lib, data) match {
    case (GameLogic.Chess(), Drop.Chess(data))     => chess.format.pgn.Dumper(data)
    case (GameLogic.FairySF(), Drop.FairySF(data)) => fairysf.format.pgn.Dumper(data)
    case (GameLogic.Go(), Drop.Go(data))           => go.format.pgn.Dumper(data)
    case _                                         => sys.error("Drops can only be applied to chess/fairysf/go")
  }

  def apply(lib: GameLogic, data: Pass): String = (lib, data) match {
    case (GameLogic.Go(), Pass.Go(data)) => go.format.pgn.Dumper(data)
    case _                               => sys.error("Pass can only be applied to go")
  }

  def apply(lib: GameLogic, data: SelectSquares): String = (lib, data) match {
    case (GameLogic.Go(), SelectSquares.Go(data)) => go.format.pgn.Dumper(data)
    case _                                        => sys.error("SelectSquares can only be applied to go")
  }

  def apply(lib: GameLogic, data: Action): String = data match {
    case m: Move           => apply(lib, m)
    case d: Drop           => apply(lib, d)
    case p: Pass           => apply(lib, p)
    case ss: SelectSquares => apply(lib, ss)
    case _                 => sys.error("unknown action to apply to a game")
>>>>>>> origin/master
  }

}
